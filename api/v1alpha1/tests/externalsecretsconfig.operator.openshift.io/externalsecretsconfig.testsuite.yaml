apiVersion: apiextensions.k8s.io/v1 # Hack because controller-gen complains if we don't have this
name: "ExternalSecretsConfig"
crdName: externalsecretsconfigs.operator.openshift.io
tests:
  onCreate:
    - name: Should be able to create a minimal ExternalSecretsConfig instance
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec: {} # No spec is required for a ExternalSecretsConfig
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec: {}
    - name: Should be able to create ExternalSecretsConfig with ControllerConfig spec
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: "external-secrets"
            labels:
              "app": "external-secrets"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: "external-secrets"
            labels:
              "app": "external-secrets"
    - name: Should be able to create ExternalSecretsConfig with ApplicationConfig spec
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            operatingNamespace: "test-namespace"
            logLevel: 3
            bitwardenSecretManagerProvider:
              enabled: "true"
              secretRef:
                name: "bitwarden-tls-certs"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            operatingNamespace: "test-namespace"
            logLevel: 3
            bitwardenSecretManagerProvider:
              enabled: "true"
              secretRef:
                name: "bitwarden-tls-certs"
    - name: Should be able to create ExternalSecretsConfig with cert-manager configuration
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "letsencrypt-issuer"
                kind: "ClusterIssuer"
                group: "cert-manager.io"
              addInjectorAnnotations: "true"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 1
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "letsencrypt-issuer"
                kind: "ClusterIssuer"
                group: "cert-manager.io"
              addInjectorAnnotations: "true"
              certificateDuration: "8760h"
              certificateRenewBefore: "30m"
    - name: Should fail to create with invalid singleton name
      resourceName: not-cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec: {}
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"not-cluster\" is invalid: <nil>: Invalid value: \"object\": ExternalSecretsConfig is a singleton, .metadata.name must be 'cluster'"
    - name: Should fail to create cert-manager enabled without issuerRef
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.certManagerConfig: Invalid value: \"object\": issuerRef must be provided when enabled is set to 'true'"
    - name: Should fail with addInjectorAnnotations without cert-manager enabled
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "false"
              addInjectorAnnotations: "true"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.certManagerConfig: Invalid value: \"object\": addInjectorAnnotations can only be set when enabled is set to 'true'"
    - name: Should fail with addInjectorAnnotations true when enabled is false explicitly
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "false"
              addInjectorAnnotations: "true"
              issuerRef:
                name: "test-issuer"
                kind: "ClusterIssuer"
                group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.certManagerConfig: Invalid value: \"object\": addInjectorAnnotations can only be set when enabled is set to 'true'"
    - name: Should allow addInjectorAnnotations false when enabled is false
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "false"
              addInjectorAnnotations: "false"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 1
            certManagerConfig:
              enabled: "false"
              addInjectorAnnotations: "false"
              certificateDuration: "8760h"
              certificateRenewBefore: "30m"
    - name: Should allow omitting addInjectorAnnotations when enabled is false
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "false"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 1
            certManagerConfig:
              enabled: "false"
              certificateDuration: "8760h"
              certificateRenewBefore: "30m"
              addInjectorAnnotations: "false"
    - name: Should fail with invalid issuer kind
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "test-issuer"
                kind: "InvalidKind"
                group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.certManagerConfig.issuerRef: Invalid value: \"object\": kind must be either 'Issuer' or 'ClusterIssuer'"
    - name: Should fail with invalid issuer group
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "test-issuer"
                kind: "ClusterIssuer"
                group: "invalid-group"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.certManagerConfig.issuerRef: Invalid value: \"object\": group must be 'cert-manager.io'"
    - name: Should fail with operatingNamespace too short
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            operatingNamespace: ""
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.operatingNamespace: Invalid value: \"\": spec.appConfig.operatingNamespace in body should be at least 1 chars long"
    - name: Should fail with operatingNamespace too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            operatingNamespace: "this-namespace-name-is-way-too-long-and-exceeds-the-maximum-allowed-length-of-sixty-three-characters-total"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.appConfig.operatingNamespace: Too long: may not be more than 63 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with controller namespace too short
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: ""
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.namespace: Invalid value: \"\": spec.controllerConfig.namespace in body should be at least 1 chars long"
    - name: Should fail with controller namespace too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: "this-namespace-name-is-way-too-long-and-exceeds-the-maximum-allowed-length-of-sixty-three-characters-total"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.controllerConfig.namespace: Too long: may not be more than 63 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with too many controller labels
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: "external-secrets"
            labels:
              "label-key-0": "label-value-0"
              "label-key-1": "label-value-1"
              "label-key-2": "label-value-2"
              "label-key-3": "label-value-3"
              "label-key-4": "label-value-4"
              "label-key-5": "label-value-5"
              "label-key-6": "label-value-6"
              "label-key-7": "label-value-7"
              "label-key-8": "label-value-8"
              "label-key-9": "label-value-9"
              "label-key-10": "label-value-10"
              "label-key-11": "label-value-11"
              "label-key-12": "label-value-12"
              "label-key-13": "label-value-13"
              "label-key-14": "label-value-14"
              "label-key-15": "label-value-15"
              "label-key-16": "label-value-16"
              "label-key-17": "label-value-17"
              "label-key-18": "label-value-18"
              "label-key-19": "label-value-19"
              "label-key-20": "label-value-20"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.controllerConfig.labels: Too many: 21: must have at most 20 items, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with issuerRef name too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "this-issuer-name-is-extremely-long-and-exceeds-the-kubernetes-maximum-name-length-limit-of-two-hundred-fifty-three-characters-which-is-quite-a-lot-of-characters-but-we-need-to-test-this-validation-constraint-properly-to-ensure-it-works-as-expected-in-all-scenarios"
                kind: "ClusterIssuer"
                group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.appConfig.certManagerConfig.issuerRef.name: Too long: may not be more than 253 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with issuerRef name empty (required field)
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: ""
                kind: "ClusterIssuer"
                group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.certManagerConfig.issuerRef.name: Invalid value: \"\": spec.appConfig.certManagerConfig.issuerRef.name in body should be at least 1 chars long"
    - name: Should fail with issuerRef kind too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "test-issuer"
                kind: "this-kind-name-is-extremely-long-and-exceeds-the-kubernetes-maximum-name-length-limit-of-two-hundred-fifty-three-characters-which-is-quite-a-lot-of-characters-but-we-need-to-test-this-validation-constraint-properly-to-ensure-it-works-as-expected-in-all-scenarios"
                group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.appConfig.certManagerConfig.issuerRef.kind: Too long: may not be more than 253 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with issuerRef group too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "test-issuer"
                kind: "ClusterIssuer"
                group: "this-group-name-is-extremely-long-and-exceeds-the-kubernetes-maximum-name-length-limit-of-two-hundred-fifty-three-characters-which-is-quite-a-lot-of-characters-but-we-need-to-test-this-validation-constraint-properly-to-ensure-it-works-as-expected-in-all-scenarios"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.appConfig.certManagerConfig.issuerRef.group: Too long: may not be more than 253 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with bitwarden secretRef name empty (required field)
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            bitwardenSecretManagerProvider:
              enabled: "true"
              secretRef:
                name: ""
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.bitwardenSecretManagerProvider.secretRef.name: Invalid value: \"\": spec.appConfig.bitwardenSecretManagerProvider.secretRef.name in body should be at least 1 chars long"
    - name: Should fail with bitwarden secretRef name too long
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            bitwardenSecretManagerProvider:
              enabled: "true"
              secretRef:
                name: "this-secret-name-is-extremely-long-and-exceeds-the-kubernetes-maximum-name-length-limit-of-two-hundred-fifty-three-characters-which-is-quite-a-lot-of-characters-but-we-need-to-test-this-validation-constraint-properly-to-ensure-it-works-as-expected-in-all-scenarios"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.appConfig.bitwardenSecretManagerProvider.secretRef.name: Too long: may not be more than 253 bytes, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
    - name: Should fail with invalid log level too low
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 0
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.logLevel: Invalid value: 0: spec.appConfig.logLevel in body should be greater than or equal to 1"
    - name: Should fail with invalid log level too high
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 10
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.logLevel: Invalid value: 10: spec.appConfig.logLevel in body should be less than or equal to 5"
    - name: Should fail with too many tolerations
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            tolerations:
              - key: "taint-key-0"
                operator: "Equal"
                value: "taint-value-0"
                effect: "NoSchedule"
              - key: "taint-key-1"
                operator: "Equal"
                value: "taint-value-1"
                effect: "NoSchedule"
              - key: "taint-key-2"
                operator: "Equal"
                value: "taint-value-2"
                effect: "NoSchedule"
              - key: "taint-key-3"
                operator: "Equal"
                value: "taint-value-3"
                effect: "NoSchedule"
              - key: "taint-key-4"
                operator: "Equal"
                value: "taint-value-4"
                effect: "NoSchedule"
              - key: "taint-key-5"
                operator: "Equal"
                value: "taint-value-5"
                effect: "NoSchedule"
              - key: "taint-key-6"
                operator: "Equal"
                value: "taint-value-6"
                effect: "NoSchedule"
              - key: "taint-key-7"
                operator: "Equal"
                value: "taint-value-7"
                effect: "NoSchedule"
              - key: "taint-key-8"
                operator: "Equal"
                value: "taint-value-8"
                effect: "NoSchedule"
              - key: "taint-key-9"
                operator: "Equal"
                value: "taint-value-9"
                effect: "NoSchedule"
              - key: "taint-key-10"
                operator: "Equal"
                value: "taint-value-10"
                effect: "NoSchedule"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: [spec.appConfig.tolerations: Too many: 11: must have at most 10 items, <nil>: Invalid value: \"null\": some validation rules were not checked because the object was invalid; correct the existing errors to complete validation]"
  onUpdate:
    - name: Should not be able to modify configured Namespace in ControllerConfig spec
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: "external-secrets"
            labels:
              "app": "external-secrets"
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: "external-secrets-1"
            labels:
              "app": "external-secrets"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.controllerConfig.namespace: Invalid value: \"string\": namespace is immutable once set"
    - name: Should not be able to change cert-manager enabled after creation
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "false"
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "letsencrypt-issuer"
                kind: "ClusterIssuer"
                group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.certManagerConfig.enabled: Invalid value: \"string\": enabled is immutable once set"
    - name: Should not be able to change issuerRef after creation
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "old-issuer"
                kind: "ClusterIssuer"
                group: "cert-manager.io"
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            certManagerConfig:
              enabled: "true"
              issuerRef:
                name: "new-issuer"
                kind: "ClusterIssuer"
                group: "cert-manager.io"
      expectedError: "ExternalSecretsConfig.operator.openshift.io \"cluster\" is invalid: spec.appConfig.certManagerConfig.issuerRef: Invalid value: \"object\": issuerRef is immutable once set"
    - name: Should be able to update labels in controller config
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: "external-secrets"
            labels:
              "env": "dev"
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: "external-secrets"
            labels:
              "env": "prod"
              "version": "v1.0.0"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          controllerConfig:
            namespace: "external-secrets"
            labels:
              "env": "prod"
              "version": "v1.0.0"
    - name: Should be able to add bitwarden provider after creation
      resourceName: cluster
      initial: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig: {}
      updated: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            bitwardenSecretManagerProvider:
              enabled: "true"
              secretRef:
                name: "bitwarden-certs"
      expected: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ExternalSecretsConfig
        spec:
          appConfig:
            logLevel: 1
            bitwardenSecretManagerProvider:
              enabled: "true"
              secretRef:
                name: "bitwarden-certs"